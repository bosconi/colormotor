# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cm', [dirname(__file__)])
        except ImportError:
            import _cm
            return _cm
        if fp is not None:
            try:
                _mod = imp.load_module('_cm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cm = swig_import_helper()
    del swig_import_helper
else:
    import _cm
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cm.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _cm.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _cm.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _cm.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _cm.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _cm.SwigPyIterator_equal(self, x)

    def copy(self):
        return _cm.SwigPyIterator_copy(self)

    def next(self):
        return _cm.SwigPyIterator_next(self)

    def __next__(self):
        return _cm.SwigPyIterator___next__(self)

    def previous(self):
        return _cm.SwigPyIterator_previous(self)

    def advance(self, n):
        return _cm.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _cm.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _cm.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _cm.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _cm.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _cm.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _cm.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _cm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cm.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm.FloatVector___nonzero__(self)

    def __bool__(self):
        return _cm.FloatVector___bool__(self)

    def __len__(self):
        return _cm.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _cm.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm.FloatVector___setitem__(self, *args)

    def pop(self):
        return _cm.FloatVector_pop(self)

    def append(self, x):
        return _cm.FloatVector_append(self, x)

    def empty(self):
        return _cm.FloatVector_empty(self)

    def size(self):
        return _cm.FloatVector_size(self)

    def swap(self, v):
        return _cm.FloatVector_swap(self, v)

    def begin(self):
        return _cm.FloatVector_begin(self)

    def end(self):
        return _cm.FloatVector_end(self)

    def rbegin(self):
        return _cm.FloatVector_rbegin(self)

    def rend(self):
        return _cm.FloatVector_rend(self)

    def clear(self):
        return _cm.FloatVector_clear(self)

    def get_allocator(self):
        return _cm.FloatVector_get_allocator(self)

    def pop_back(self):
        return _cm.FloatVector_pop_back(self)

    def erase(self, *args):
        return _cm.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _cm.new_FloatVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cm.FloatVector_push_back(self, x)

    def front(self):
        return _cm.FloatVector_front(self)

    def back(self):
        return _cm.FloatVector_back(self)

    def assign(self, n, x):
        return _cm.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _cm.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _cm.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _cm.FloatVector_reserve(self, n)

    def capacity(self):
        return _cm.FloatVector_capacity(self)
    __swig_destroy__ = _cm.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _cm.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class VecVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cm.VecVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm.VecVector___nonzero__(self)

    def __bool__(self):
        return _cm.VecVector___bool__(self)

    def __len__(self):
        return _cm.VecVector___len__(self)

    def __getslice__(self, i, j):
        return _cm.VecVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm.VecVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm.VecVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm.VecVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm.VecVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm.VecVector___setitem__(self, *args)

    def pop(self):
        return _cm.VecVector_pop(self)

    def append(self, x):
        return _cm.VecVector_append(self, x)

    def empty(self):
        return _cm.VecVector_empty(self)

    def size(self):
        return _cm.VecVector_size(self)

    def swap(self, v):
        return _cm.VecVector_swap(self, v)

    def begin(self):
        return _cm.VecVector_begin(self)

    def end(self):
        return _cm.VecVector_end(self)

    def rbegin(self):
        return _cm.VecVector_rbegin(self)

    def rend(self):
        return _cm.VecVector_rend(self)

    def clear(self):
        return _cm.VecVector_clear(self)

    def get_allocator(self):
        return _cm.VecVector_get_allocator(self)

    def pop_back(self):
        return _cm.VecVector_pop_back(self)

    def erase(self, *args):
        return _cm.VecVector_erase(self, *args)

    def __init__(self, *args):
        this = _cm.new_VecVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cm.VecVector_push_back(self, x)

    def front(self):
        return _cm.VecVector_front(self)

    def back(self):
        return _cm.VecVector_back(self)

    def assign(self, n, x):
        return _cm.VecVector_assign(self, n, x)

    def resize(self, *args):
        return _cm.VecVector_resize(self, *args)

    def insert(self, *args):
        return _cm.VecVector_insert(self, *args)

    def reserve(self, n):
        return _cm.VecVector_reserve(self, n)

    def capacity(self):
        return _cm.VecVector_capacity(self)
    __swig_destroy__ = _cm.delete_VecVector
    __del__ = lambda self: None
VecVector_swigregister = _cm.VecVector_swigregister
VecVector_swigregister(VecVector)

class MatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _cm.MatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _cm.MatVector___nonzero__(self)

    def __bool__(self):
        return _cm.MatVector___bool__(self)

    def __len__(self):
        return _cm.MatVector___len__(self)

    def __getslice__(self, i, j):
        return _cm.MatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _cm.MatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _cm.MatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _cm.MatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _cm.MatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _cm.MatVector___setitem__(self, *args)

    def pop(self):
        return _cm.MatVector_pop(self)

    def append(self, x):
        return _cm.MatVector_append(self, x)

    def empty(self):
        return _cm.MatVector_empty(self)

    def size(self):
        return _cm.MatVector_size(self)

    def swap(self, v):
        return _cm.MatVector_swap(self, v)

    def begin(self):
        return _cm.MatVector_begin(self)

    def end(self):
        return _cm.MatVector_end(self)

    def rbegin(self):
        return _cm.MatVector_rbegin(self)

    def rend(self):
        return _cm.MatVector_rend(self)

    def clear(self):
        return _cm.MatVector_clear(self)

    def get_allocator(self):
        return _cm.MatVector_get_allocator(self)

    def pop_back(self):
        return _cm.MatVector_pop_back(self)

    def erase(self, *args):
        return _cm.MatVector_erase(self, *args)

    def __init__(self, *args):
        this = _cm.new_MatVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _cm.MatVector_push_back(self, x)

    def front(self):
        return _cm.MatVector_front(self)

    def back(self):
        return _cm.MatVector_back(self)

    def assign(self, n, x):
        return _cm.MatVector_assign(self, n, x)

    def resize(self, *args):
        return _cm.MatVector_resize(self, *args)

    def insert(self, *args):
        return _cm.MatVector_insert(self, *args)

    def reserve(self, n):
        return _cm.MatVector_reserve(self, n)

    def capacity(self):
        return _cm.MatVector_capacity(self)
    __swig_destroy__ = _cm.delete_MatVector
    __del__ = lambda self: None
MatVector_swigregister = _cm.MatVector_swigregister
MatVector_swigregister(MatVector)


_cm.PARAM_UNKNOWN_swigconstant(_cm)
PARAM_UNKNOWN = _cm.PARAM_UNKNOWN

_cm.PARAM_FLOAT_swigconstant(_cm)
PARAM_FLOAT = _cm.PARAM_FLOAT

_cm.PARAM_DOUBLE_swigconstant(_cm)
PARAM_DOUBLE = _cm.PARAM_DOUBLE

_cm.PARAM_BOOL_swigconstant(_cm)
PARAM_BOOL = _cm.PARAM_BOOL

_cm.PARAM_STRING_swigconstant(_cm)
PARAM_STRING = _cm.PARAM_STRING

_cm.PARAM_CSTRING_swigconstant(_cm)
PARAM_CSTRING = _cm.PARAM_CSTRING

_cm.PARAM_EVENT_swigconstant(_cm)
PARAM_EVENT = _cm.PARAM_EVENT

_cm.PARAM_SELECTION_swigconstant(_cm)
PARAM_SELECTION = _cm.PARAM_SELECTION

_cm.PARAM_INT_swigconstant(_cm)
PARAM_INT = _cm.PARAM_INT

_cm.PARAM_VECTORf_swigconstant(_cm)
PARAM_VECTORf = _cm.PARAM_VECTORf

_cm.PARAM_VECTORd_swigconstant(_cm)
PARAM_VECTORd = _cm.PARAM_VECTORd

_cm.NUM_PARAM_TYPES_swigconstant(_cm)
NUM_PARAM_TYPES = _cm.NUM_PARAM_TYPES
class Param(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Param, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Param, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cm.new_Param()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

        self.thisown = False



    __swig_destroy__ = _cm.delete_Param
    __del__ = lambda self: None

    def clone(self, *args):
        return _cm.Param_clone(self, *args)

    def setFloat(self, val, index=0, bInformListeners=True):
        return _cm.Param_setFloat(self, val, index, bInformListeners)

    def setBool(self, val, bInformListeners=True):
        return _cm.Param_setBool(self, val, bInformListeners)

    def setString(self, val, bInformListeners=True):
        return _cm.Param_setString(self, val, bInformListeners)

    def setInt(self, val, bInformListeners=True):
        return _cm.Param_setInt(self, val, bInformListeners)

    def getFloat(self):
        return _cm.Param_getFloat(self)

    def getBool(self):
        return _cm.Param_getBool(self)

    def getInt(self):
        return _cm.Param_getInt(self)

    def getString(self):
        return _cm.Param_getString(self)

    def getMin(self):
        return _cm.Param_getMin(self)

    def getMax(self):
        return _cm.Param_getMax(self)

    def getDefault(self):
        return _cm.Param_getDefault(self)

    def getType(self):
        return _cm.Param_getType(self)

    def getName(self):
        return _cm.Param_getName(self)

    def isName(self, str):
        return _cm.Param_isName(self, str)
    __swig_getmethods__["getTypeFromString"] = lambda x: _cm.Param_getTypeFromString
    if _newclass:
        getTypeFromString = staticmethod(_cm.Param_getTypeFromString)
    __swig_getmethods__["getTypeName"] = lambda x: _cm.Param_getTypeName
    if _newclass:
        getTypeName = staticmethod(_cm.Param_getTypeName)

    def getOptions(self):
        return _cm.Param_getOptions(self)

    def setOptions(self, opt):
        return _cm.Param_setOptions(self, opt)

    def appendOption(self, opt):
        return _cm.Param_appendOption(self, opt)

    def hasOption(self, opt):
        return _cm.Param_hasOption(self, opt)

    def getPath(self):
        return _cm.Param_getPath(self)

    def setPath(self, path):
        return _cm.Param_setPath(self, path)
Param_swigregister = _cm.Param_swigregister
Param_swigregister(Param)

def Param_getTypeFromString(str):
    return _cm.Param_getTypeFromString(str)
Param_getTypeFromString = _cm.Param_getTypeFromString

def Param_getTypeName(type):
    return _cm.Param_getTypeName(type)
Param_getTypeName = _cm.Param_getTypeName

class ParamList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParamList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParamList, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cm.new_ParamList(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cm.delete_ParamList
    __del__ = lambda self: None

    def release(self):
        return _cm.ParamList_release(self)

    def clone(self, keepAddresses=False):
        return _cm.ParamList_clone(self, keepAddresses)

    def getNumParams(self):
        return _cm.ParamList_getNumParams(self)

    def getParam(self, index):
        return _cm.ParamList_getParam(self, index)

    def addParams(self, list):
        return _cm.ParamList_addParams(self, list)

    def addParam(self, param):
        return _cm.ParamList_addParam(self, param)

    def getPath(self):
        return _cm.ParamList_getPath(self)

    def getChild(self, *args):
        return _cm.ParamList_getChild(self, *args)

    def getParent(self):
        return _cm.ParamList_getParent(self)

    def newChild(self, name):
        return _cm.ParamList_newChild(self, name)

    def setCurrent(self, name):
        return _cm.ParamList_setCurrent(self, name)

    def resetCurrent(self):
        return _cm.ParamList_resetCurrent(self)

    def addChild(self, params):
        return _cm.ParamList_addChild(self, params)

    def getNumChildren(self):
        return _cm.ParamList_getNumChildren(self)

    def addSeparator(self):
        return _cm.ParamList_addSeparator(self)

    def addFloat(self, name, value, min=0.0, max=1.0):
        return _cm.ParamList_addFloat(self, name, value, min, max)

    def addBool(self, name, value):
        return _cm.ParamList_addBool(self, name, value)

    def addInt(self, name, value):
        return _cm.ParamList_addInt(self, name, value)

    def addString(self, name, value):
        return _cm.ParamList_addString(self, name, value)

    def setString(self, name, v, inform=True):
        return _cm.ParamList_setString(self, name, v, inform)

    def setFloat(self, name, v, inform=True):
        return _cm.ParamList_setFloat(self, name, v, inform)

    def setBool(self, name, v, inform=True):
        return _cm.ParamList_setBool(self, name, v, inform)

    def setInt(self, name, v, inform=True):
        return _cm.ParamList_setInt(self, name, v, inform)

    def getName(self):
        return _cm.ParamList_getName(self)

    def setName(self, name):
        return _cm.ParamList_setName(self, name)

    def remove(self, v):
        return _cm.ParamList_remove(self, v)

    def find(self, name):
        return _cm.ParamList_find(self, name)

    def findSafe(self, name):
        return _cm.ParamList_findSafe(self, name)

    def saveXml(self, fname):
        return _cm.ParamList_saveXml(self, fname)

    def loadXml(self, fname):
        return _cm.ParamList_loadXml(self, fname)
ParamList_swigregister = _cm.ParamList_swigregister
ParamList_swigregister(ParamList)


def printSameLine(format):
    return _cm.printSameLine(format)
printSameLine = _cm.printSameLine

def makePathNice(path):
    return _cm.makePathNice(path)
makePathNice = _cm.makePathNice

def getFilenameFromPath(path):
    return _cm.getFilenameFromPath(path)
getFilenameFromPath = _cm.getFilenameFromPath

def getDirectoryFromPath(path):
    return _cm.getDirectoryFromPath(path)
getDirectoryFromPath = _cm.getDirectoryFromPath

def getPathWithoutExt(fileName):
    return _cm.getPathWithoutExt(fileName)
getPathWithoutExt = _cm.getPathWithoutExt

def getFileExt(fileName):
    return _cm.getFileExt(fileName)
getFileExt = _cm.getFileExt

def fileExists(fileName):
    return _cm.fileExists(fileName)
fileExists = _cm.fileExists

def getFilesInFolder(files, path):
    return _cm.getFilesInFolder(files, path)
getFilesInFolder = _cm.getFilesInFolder

def getCurrentDirectory():
    return _cm.getCurrentDirectory()
getCurrentDirectory = _cm.getCurrentDirectory

def getFileSize(f):
    return _cm.getFileSize(f)
getFileSize = _cm.getFileSize

def getExecutablePath():
    return _cm.getExecutablePath()
getExecutablePath = _cm.getExecutablePath

def hexDump(*args):
    return _cm.hexDump(*args)
hexDump = _cm.hexDump

def binarize(path, name):
    return _cm.binarize(path, name)
binarize = _cm.binarize

def readLine(s, file):
    return _cm.readLine(s, file)
readLine = _cm.readLine

def split(str, delimiters):
    return _cm.split(str, delimiters)
split = _cm.split

def stringBetween(str, a, b):
    return _cm.stringBetween(str, a, b)
stringBetween = _cm.stringBetween

def stringFromFile(path):
    return _cm.stringFromFile(path)
stringFromFile = _cm.stringFromFile

def shaderString(path):
    return _cm.shaderString(path)
shaderString = _cm.shaderString

def openFolderDialog(str, title):
    return _cm.openFolderDialog(str, title)
openFolderDialog = _cm.openFolderDialog

def openFileDialog(path, type, maxsize=2048):
    return _cm.openFileDialog(path, type, maxsize)
openFileDialog = _cm.openFileDialog

def saveFileDialog(path, type, maxsize=2048):
    return _cm.saveFileDialog(path, type, maxsize)
saveFileDialog = _cm.saveFileDialog

def velocity(X_, dt):
    return _cm.velocity(X_, dt)
velocity = _cm.velocity

def acceleration(X, dt):
    return _cm.acceleration(X, dt)
acceleration = _cm.acceleration

def jerk(X, dt):
    return _cm.jerk(X, dt)
jerk = _cm.jerk

def speed(X, dt):
    return _cm.speed(X, dt)
speed = _cm.speed

def col_norm(X):
    return _cm.col_norm(X)
col_norm = _cm.col_norm

def normalizeSignal(X):
    return _cm.normalizeSignal(X)
normalizeSignal = _cm.normalizeSignal

def rotX3d(theta, affine=True):
    return _cm.rotX3d(theta, affine)
rotX3d = _cm.rotX3d

def rotY3d(theta, affine=True):
    return _cm.rotY3d(theta, affine)
rotY3d = _cm.rotY3d

def rotZ3d(theta, affine=True):
    return _cm.rotZ3d(theta, affine)
rotZ3d = _cm.rotZ3d

def trans3d(*args):
    return _cm.trans3d(*args)
trans3d = _cm.trans3d

def scaling3d(*args):
    return _cm.scaling3d(*args)
scaling3d = _cm.scaling3d

def rot2d(theta, affine=True):
    return _cm.rot2d(theta, affine)
rot2d = _cm.rot2d

def trans2d(*args):
    return _cm.trans2d(*args)
trans2d = _cm.trans2d

def scaling2d(*args):
    return _cm.scaling2d(*args)
scaling2d = _cm.scaling2d

def x44(*args):
    return _cm.x44(*args)
x44 = _cm.x44

def y44(*args):
    return _cm.y44(*args)
y44 = _cm.y44

def z44(*args):
    return _cm.z44(*args)
z44 = _cm.z44

def trans44(*args):
    return _cm.trans44(*args)
trans44 = _cm.trans44

def x33(*args):
    return _cm.x33(*args)
x33 = _cm.x33

def y33(*args):
    return _cm.y33(*args)
y33 = _cm.y33

def trans33(*args):
    return _cm.trans33(*args)
trans33 = _cm.trans33

def perspective(fov, aspect, znear, zfar, wFriendly=False):
    return _cm.perspective(fov, aspect, znear, zfar, wFriendly)
perspective = _cm.perspective

def frustum(left, right, bottom, top, near, far):
    return _cm.frustum(left, right, bottom, top, near, far)
frustum = _cm.frustum

def orthoOffCenter(l, r, b, t, zn, zf):
    return _cm.orthoOffCenter(l, r, b, t, zn, zf)
orthoOffCenter = _cm.orthoOffCenter

def ortho(w, h, znear, zfar):
    return _cm.ortho(w, h, znear, zfar)
ortho = _cm.ortho

def pointAt(pos, target, up):
    return _cm.pointAt(pos, target, up)
pointAt = _cm.pointAt

def lookAt(pos, target, up):
    return _cm.lookAt(pos, target, up)
lookAt = _cm.lookAt

def quatMul(a, b):
    return _cm.quatMul(a, b)
quatMul = _cm.quatMul

def quat(m):
    return _cm.quat(m)
quat = _cm.quat

def m44(q_):
    return _cm.m44(q_)
m44 = _cm.m44

def quatAxisAngle(axis, angle):
    return _cm.quatAxisAngle(axis, angle)
quatAxisAngle = _cm.quatAxisAngle

def quatIdentity():
    return _cm.quatIdentity()
quatIdentity = _cm.quatIdentity

def quatAxis(q, eps=1e-10):
    return _cm.quatAxis(q, eps)
quatAxis = _cm.quatAxis

def quatEuler(*args):
    return _cm.quatEuler(*args)
quatEuler = _cm.quatEuler

def quatSetAngle(q, theta):
    return _cm.quatSetAngle(q, theta)
quatSetAngle = _cm.quatSetAngle

def quatAngle(q):
    return _cm.quatAngle(q)
quatAngle = _cm.quatAngle

def quatConjugate(q):
    return _cm.quatConjugate(q)
quatConjugate = _cm.quatConjugate

def slerp(a, b, t, minAngle=0.001):
    return _cm.slerp(a, b, t, minAngle)
slerp = _cm.slerp
class Box(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cm.new_Box(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def l(self):
        return _cm.Box_l(self)

    def t(self):
        return _cm.Box_t(self)

    def r(self):
        return _cm.Box_r(self)

    def b(self):
        return _cm.Box_b(self)

    def dimension(self):
        return _cm.Box_dimension(self)

    def width(self):
        return _cm.Box_width(self)

    def height(self):
        return _cm.Box_height(self)

    def depth(self):
        return _cm.Box_depth(self)

    def center(self):
        return _cm.Box_center(self)

    def setCenter(self, cenp):
        return _cm.Box_setCenter(self, cenp)

    def corners(self):
        return _cm.Box_corners(self)

    def contains(self, p):
        return _cm.Box_contains(self, p)

    def includeAt(self, index, p):
        return _cm.Box_includeAt(self, index, p)

    def include(self, *args):
        return _cm.Box_include(self, *args)

    def min(self):
        return _cm.Box_min(self)

    def max(self):
        return _cm.Box_max(self)
    __swig_setmethods__["minmax"] = _cm.Box_minmax_set
    __swig_getmethods__["minmax"] = _cm.Box_minmax_get
    if _newclass:
        minmax = _swig_property(_cm.Box_minmax_get, _cm.Box_minmax_set)
    __swig_destroy__ = _cm.delete_Box
    __del__ = lambda self: None
Box_swigregister = _cm.Box_swigregister
Box_swigregister(Box)

class Contour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Contour, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cm.new_Contour(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clear(self):
        return _cm.Contour_clear(self)

    def empty(self):
        return _cm.Contour_empty(self)

    def size(self):
        return _cm.Contour_size(self)

    def dimension(self):
        return _cm.Contour_dimension(self)

    def isValid(self):
        return _cm.Contour_isValid(self)

    def last(self):
        return _cm.Contour_last(self)

    def getPoint(self, i):
        return _cm.Contour_getPoint(self, i)

    def interpolate(self, t):
        return _cm.Contour_interpolate(self, t)

    def length(self, a=0, b=-1):
        return _cm.Contour_length(self, a, b)

    def centroid(self):
        return _cm.Contour_centroid(self)

    def boundingBox(self):
        return _cm.Contour_boundingBox(self)

    def addDimension(self):
        return _cm.Contour_addDimension(self)

    def addPoint(self, *args):
        return _cm.Contour_addPoint(self, *args)

    def close(self, f=True):
        return _cm.Contour_close(self, f)

    def save(self, *args):
        return _cm.Contour_save(self, *args)

    def load(self, *args):
        return _cm.Contour_load(self, *args)

    def transform(self, m):
        return _cm.Contour_transform(self, m)

    def transformed(self, m):
        return _cm.Contour_transformed(self, m)
    __swig_setmethods__["points"] = _cm.Contour_points_set
    __swig_getmethods__["points"] = _cm.Contour_points_get
    if _newclass:
        points = _swig_property(_cm.Contour_points_get, _cm.Contour_points_set)
    __swig_setmethods__["closed"] = _cm.Contour_closed_set
    __swig_getmethods__["closed"] = _cm.Contour_closed_get
    if _newclass:
        closed = _swig_property(_cm.Contour_closed_get, _cm.Contour_closed_set)

    def __iter__(self):
    	for i in range(self.size()):
    		yield self.points.col(i)

    def __getitem__(self, i):
    	return self.points.col(i)

    def __len__(self):
    	return self.size()


    __swig_destroy__ = _cm.delete_Contour
    __del__ = lambda self: None
Contour_swigregister = _cm.Contour_swigregister
Contour_swigregister(Contour)

class Shape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shape, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cm.new_Shape(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def clear(self):
        return _cm.Shape_clear(self)

    def size(self):
        return _cm.Shape_size(self)

    def last(self, *args):
        return _cm.Shape_last(self, *args)

    def getContour(self, *args):
        return _cm.Shape_getContour(self, *args)

    def add(self, *args):
        return _cm.Shape_add(self, *args)

    def loadSvg(self, f, subd=100):
        return _cm.Shape_loadSvg(self, f, subd)

    def centroid(self):
        return _cm.Shape_centroid(self)

    def boundingBox(self):
        return _cm.Shape_boundingBox(self)

    def transform(self, m):
        return _cm.Shape_transform(self, m)

    def transformed(self, m):
        return _cm.Shape_transformed(self, m)
    __swig_setmethods__["contours"] = _cm.Shape_contours_set
    __swig_getmethods__["contours"] = _cm.Shape_contours_get
    if _newclass:
        contours = _swig_property(_cm.Shape_contours_get, _cm.Shape_contours_set)

    def __iter__(self):
    	for i in range(self.size()):
    		yield self.getContour(i)

    def __getitem__(self, i):
    	return self.getContour(i)

    def __len__(self):
    	return self.size()


    __swig_destroy__ = _cm.delete_Shape
    __del__ = lambda self: None
Shape_swigregister = _cm.Shape_swigregister
Shape_swigregister(Shape)

class GfxObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GfxObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GfxObject, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cm.delete_GfxObject
    __del__ = lambda self: None

    def __init__(self):
        this = _cm.new_GfxObject()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
GfxObject_swigregister = _cm.GfxObject_swigregister
GfxObject_swigregister(GfxObject)

class GLObj(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GLObj, name)
    __repr__ = _swig_repr
    TEXTURE = _cm.GLObj_TEXTURE
    SHADER = _cm.GLObj_SHADER
    PROGRAM = _cm.GLObj_PROGRAM
    VB = _cm.GLObj_VB
    IB = _cm.GLObj_IB
    FBO = _cm.GLObj_FBO
    RENDERBUFFER = _cm.GLObj_RENDERBUFFER

    def __init__(self, *args):
        this = _cm.new_GLObj(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["glId"] = _cm.GLObj_glId_set
    __swig_getmethods__["glId"] = _cm.GLObj_glId_get
    if _newclass:
        glId = _swig_property(_cm.GLObj_glId_get, _cm.GLObj_glId_set)
    __swig_setmethods__["type"] = _cm.GLObj_type_set
    __swig_getmethods__["type"] = _cm.GLObj_type_get
    if _newclass:
        type = _swig_property(_cm.GLObj_type_get, _cm.GLObj_type_set)
    __swig_destroy__ = _cm.delete_GLObj
    __del__ = lambda self: None
GLObj_swigregister = _cm.GLObj_swigregister
GLObj_swigregister(GLObj)

class Texture(GfxObject):
    __swig_setmethods__ = {}
    for _s in [GfxObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    for _s in [GfxObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    __repr__ = _swig_repr
    FORMAT_UNKNOWN = _cm.Texture_FORMAT_UNKNOWN
    R8G8B8 = _cm.Texture_R8G8B8
    A8R8G8B8 = _cm.Texture_A8R8G8B8
    L8 = _cm.Texture_L8
    R16F = _cm.Texture_R16F
    G16R16F = _cm.Texture_G16R16F
    A16B16G16R16F = _cm.Texture_A16B16G16R16F
    R32F = _cm.Texture_R32F
    G32R32F = _cm.Texture_G32R32F
    A32B32G32R32F = _cm.Texture_A32B32G32R32F
    NUM_SUPPORTED_FORMATS = _cm.Texture_NUM_SUPPORTED_FORMATS
    LOCK_READ = _cm.Texture_LOCK_READ
    LOCK_WRITE = _cm.Texture_LOCK_WRITE
    LOCK_READWRITE = _cm.Texture_LOCK_READWRITE
    CLAMP_TO_EDGE = _cm.Texture_CLAMP_TO_EDGE
    CLAMP = _cm.Texture_CLAMP
    REPEAT = _cm.Texture_REPEAT
    NUM_WRAP_TYPES = _cm.Texture_NUM_WRAP_TYPES
    NEAREST = _cm.Texture_NEAREST
    LINEAR = _cm.Texture_LINEAR
    NUM_FILTER_TYPES = _cm.Texture_NUM_FILTER_TYPES

    def __init__(self, *args):
        this = _cm.new_Texture(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cm.delete_Texture
    __del__ = lambda self: None

    def release(self):
        return _cm.Texture_release(self)

    def bind(self, sampler=0):
        return _cm.Texture_bind(self, sampler)

    def unbind(self):
        return _cm.Texture_unbind(self)

    def getId(self):
        return _cm.Texture_getId(self)

    def empty(self):
        return _cm.Texture_empty(self)

    def init(self):
        return _cm.Texture_init(self)

    def load(self, path, miplevels=1):
        return _cm.Texture_load(self, path, miplevels)

    def create(self, *args):
        return _cm.Texture_create(self, *args)

    def setGLData(self, w, h, hwW, hwH, glTarget, glId, glFormat):
        return _cm.Texture_setGLData(self, w, h, hwW, hwH, glTarget, glId, glFormat)

    def createFromGL(self, w, h, glTarget, glId, glFormat):
        return _cm.Texture_createFromGL(self, w, h, glTarget, glId, glFormat)

    def isValid(self):
        return _cm.Texture_isValid(self)

    def setWrap(self, wrap):
        return _cm.Texture_setWrap(self, wrap)

    def setWrapS(self, wrap):
        return _cm.Texture_setWrapS(self, wrap)

    def setWrapT(self, wrap):
        return _cm.Texture_setWrapT(self, wrap)

    def setMinFilter(self, filter):
        return _cm.Texture_setMinFilter(self, filter)

    def setMagFilter(self, filter):
        return _cm.Texture_setMagFilter(self, filter)

    def setSize(self, width, height):
        return _cm.Texture_setSize(self, width, height)

    def grabFrameBuffer(self, *args):
        return _cm.Texture_grabFrameBuffer(self, *args)

    def getWidth(self):
        return _cm.Texture_getWidth(self)

    def getHeight(self):
        return _cm.Texture_getHeight(self)

    def getDepth(self):
        return _cm.Texture_getDepth(self)

    def getHardwareWidth(self):
        return _cm.Texture_getHardwareWidth(self)

    def getHardwareHeight(self):
        return _cm.Texture_getHardwareHeight(self)

    def getHardwareDepth(self):
        return _cm.Texture_getHardwareDepth(self)

    def getFormat(self):
        return _cm.Texture_getFormat(self)

    def isBound(self):
        return _cm.Texture_isBound(self)

    def draw(self, *args):
        return _cm.Texture_draw(self, *args)

    def drawPart(self, x, y, w, h, tx, ty, tw, th):
        return _cm.Texture_drawPart(self, x, y, w, h, tx, ty, tw, th)

    def lock(self, *args):
        return _cm.Texture_lock(self, *args)

    def unlock(self):
        return _cm.Texture_unlock(self)

    def pixel(self, *args):
        return _cm.Texture_pixel(self, *args)
    __swig_setmethods__["flipX"] = _cm.Texture_flipX_set
    __swig_getmethods__["flipX"] = _cm.Texture_flipX_get
    if _newclass:
        flipX = _swig_property(_cm.Texture_flipX_get, _cm.Texture_flipX_set)
    __swig_setmethods__["flipY"] = _cm.Texture_flipY_set
    __swig_getmethods__["flipY"] = _cm.Texture_flipY_get
    if _newclass:
        flipY = _swig_property(_cm.Texture_flipY_get, _cm.Texture_flipY_set)
    __swig_getmethods__["resetAllSamplers"] = lambda x: _cm.Texture_resetAllSamplers
    if _newclass:
        resetAllSamplers = staticmethod(_cm.Texture_resetAllSamplers)
Texture_swigregister = _cm.Texture_swigregister
Texture_swigregister(Texture)

def Texture_resetAllSamplers():
    return _cm.Texture_resetAllSamplers()
Texture_resetAllSamplers = _cm.Texture_resetAllSamplers

class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    GRAYSCALE = _cm.Image_GRAYSCALE
    BGRA = _cm.Image_BGRA
    RGB = _cm.Image_RGB
    UNKNOWN = _cm.Image_UNKNOWN
    __swig_destroy__ = _cm.delete_Image
    __del__ = lambda self: None

    def release(self):
        return _cm.Image_release(self)

    def __init__(self, *args):
        this = _cm.new_Image(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _cm.Image_empty(self)

    def width(self):
        return _cm.Image_width(self)

    def height(self):
        return _cm.Image_height(self)

    def bind(self, sampler=0):
        return _cm.Image_bind(self, sampler)

    def unbind(self):
        return _cm.Image_unbind(self)

    def isBound(self):
        return _cm.Image_isBound(self)

    def mirror(self, x, y):
        return _cm.Image_mirror(self, x, y)

    def updateTexture(self):
        return _cm.Image_updateTexture(self)

    def draw(self, x=0, y=0, w=0, h=0):
        return _cm.Image_draw(self, x, y, w, h)

    def getGlId(self):
        return _cm.Image_getGlId(self)

    def grabFrameBuffer(self):
        return _cm.Image_grabFrameBuffer(self)

    def save(self, path):
        return _cm.Image_save(self, path)
    __swig_setmethods__["mat"] = _cm.Image_mat_set
    __swig_getmethods__["mat"] = _cm.Image_mat_get
    if _newclass:
        mat = _swig_property(_cm.Image_mat_get, _cm.Image_mat_set)
    __swig_setmethods__["tmp"] = _cm.Image_tmp_set
    __swig_getmethods__["tmp"] = _cm.Image_tmp_get
    if _newclass:
        tmp = _swig_property(_cm.Image_tmp_get, _cm.Image_tmp_set)
    __swig_setmethods__["tex"] = _cm.Image_tex_set
    __swig_getmethods__["tex"] = _cm.Image_tex_get
    if _newclass:
        tex = _swig_property(_cm.Image_tex_get, _cm.Image_tex_set)
    __swig_setmethods__["boundSampler"] = _cm.Image_boundSampler_set
    __swig_getmethods__["boundSampler"] = _cm.Image_boundSampler_get
    if _newclass:
        boundSampler = _swig_property(_cm.Image_boundSampler_get, _cm.Image_boundSampler_set)
    __swig_setmethods__["dirty"] = _cm.Image_dirty_set
    __swig_getmethods__["dirty"] = _cm.Image_dirty_get
    if _newclass:
        dirty = _swig_property(_cm.Image_dirty_get, _cm.Image_dirty_set)
Image_swigregister = _cm.Image_swigregister
Image_swigregister(Image)

class ArcBall(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArcBall, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArcBall, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cm.new_ArcBall()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_getmethods__["projectToSphere"] = lambda x: _cm.ArcBall_projectToSphere
    if _newclass:
        projectToSphere = staticmethod(_cm.ArcBall_projectToSphere)

    def update(self, mousePos, mouseDelta, center, radius, contrained=False):
        return _cm.ArcBall_update(self, mousePos, mouseDelta, center, radius, contrained)
    __swig_setmethods__["rot"] = _cm.ArcBall_rot_set
    __swig_getmethods__["rot"] = _cm.ArcBall_rot_get
    if _newclass:
        rot = _swig_property(_cm.ArcBall_rot_get, _cm.ArcBall_rot_set)
    __swig_setmethods__["mat"] = _cm.ArcBall_mat_set
    __swig_getmethods__["mat"] = _cm.ArcBall_mat_get
    if _newclass:
        mat = _swig_property(_cm.ArcBall_mat_get, _cm.ArcBall_mat_set)
    __swig_destroy__ = _cm.delete_ArcBall
    __del__ = lambda self: None
ArcBall_swigregister = _cm.ArcBall_swigregister
ArcBall_swigregister(ArcBall)

def ArcBall_projectToSphere(*args):
    return _cm.ArcBall_projectToSphere(*args)
ArcBall_projectToSphere = _cm.ArcBall_projectToSphere


def setManualGLRelease(flag):
    return _cm.setManualGLRelease(flag)
setManualGLRelease = _cm.setManualGLRelease

def isGLReleaseManual():
    return _cm.isGLReleaseManual()
isGLReleaseManual = _cm.isGLReleaseManual

def releaseGLObject(obj):
    return _cm.releaseGLObject(obj)
releaseGLObject = _cm.releaseGLObject

def releaseGLObjects():
    return _cm.releaseGLObjects()
releaseGLObjects = _cm.releaseGLObjects

def getGLError():
    return _cm.getGLError()
getGLError = _cm.getGLError

def checkFramebufferStatus():
    return _cm.checkFramebufferStatus()
checkFramebufferStatus = _cm.checkFramebufferStatus

def areNonPowerOfTwoTexturesSupported():
    return _cm.areNonPowerOfTwoTexturesSupported()
areNonPowerOfTwoTexturesSupported = _cm.areNonPowerOfTwoTexturesSupported

def GLExtension(extName):
    return _cm.GLExtension(extName)
GLExtension = _cm.GLExtension

def createVBO(data, dataSize, target, usage):
    return _cm.createVBO(data, dataSize, target, usage)
createVBO = _cm.createVBO

_cm.FILL_SOLID_swigconstant(_cm)
FILL_SOLID = _cm.FILL_SOLID

_cm.FILL_WIRE_swigconstant(_cm)
FILL_WIRE = _cm.FILL_WIRE

_cm.FILL_POINT_swigconstant(_cm)
FILL_POINT = _cm.FILL_POINT

_cm.NUMFILLMODES_swigconstant(_cm)
NUMFILLMODES = _cm.NUMFILLMODES

_cm.CULL_NONE_swigconstant(_cm)
CULL_NONE = _cm.CULL_NONE

_cm.CULL_CW_swigconstant(_cm)
CULL_CW = _cm.CULL_CW

_cm.CULL_CCW_swigconstant(_cm)
CULL_CCW = _cm.CULL_CCW

_cm.NUMCULLMODES_swigconstant(_cm)
NUMCULLMODES = _cm.NUMCULLMODES

_cm.BLENDMODE_ALPHA_swigconstant(_cm)
BLENDMODE_ALPHA = _cm.BLENDMODE_ALPHA

_cm.BLENDMODE_ALPHA_PREMULTIPLIED_swigconstant(_cm)
BLENDMODE_ALPHA_PREMULTIPLIED = _cm.BLENDMODE_ALPHA_PREMULTIPLIED

_cm.BLENDMODE_ADDITIVE_swigconstant(_cm)
BLENDMODE_ADDITIVE = _cm.BLENDMODE_ADDITIVE

_cm.BLENDMODE_MULTIPLY_swigconstant(_cm)
BLENDMODE_MULTIPLY = _cm.BLENDMODE_MULTIPLY

_cm.NUMBLENDMODES_swigconstant(_cm)
NUMBLENDMODES = _cm.NUMBLENDMODES

_cm.BLENDMODE_NONE_swigconstant(_cm)
BLENDMODE_NONE = _cm.BLENDMODE_NONE

_cm.DEPTH_GREATER_swigconstant(_cm)
DEPTH_GREATER = _cm.DEPTH_GREATER

_cm.DEPTH_LESS_swigconstant(_cm)
DEPTH_LESS = _cm.DEPTH_LESS

_cm.DEPTH_GEQUAL_swigconstant(_cm)
DEPTH_GEQUAL = _cm.DEPTH_GEQUAL

_cm.DEPTH_LEQUAL_swigconstant(_cm)
DEPTH_LEQUAL = _cm.DEPTH_LEQUAL

_cm.DEPTH_EQUAL_swigconstant(_cm)
DEPTH_EQUAL = _cm.DEPTH_EQUAL

_cm.DEPTH_NOTEQUAL_swigconstant(_cm)
DEPTH_NOTEQUAL = _cm.DEPTH_NOTEQUAL

_cm.DEPTH_ALWAYS_swigconstant(_cm)
DEPTH_ALWAYS = _cm.DEPTH_ALWAYS

_cm.DEPTH_NEVER_swigconstant(_cm)
DEPTH_NEVER = _cm.DEPTH_NEVER

_cm.NUMDEPTHFUNCS_swigconstant(_cm)
NUMDEPTHFUNCS = _cm.NUMDEPTHFUNCS

_cm.STENCIL_GREATER_swigconstant(_cm)
STENCIL_GREATER = _cm.STENCIL_GREATER

_cm.STENCIL_LESS_swigconstant(_cm)
STENCIL_LESS = _cm.STENCIL_LESS

_cm.STENCIL_GEQUAL_swigconstant(_cm)
STENCIL_GEQUAL = _cm.STENCIL_GEQUAL

_cm.STENCIL_LEQUAL_swigconstant(_cm)
STENCIL_LEQUAL = _cm.STENCIL_LEQUAL

_cm.STENCIL_EQUAL_swigconstant(_cm)
STENCIL_EQUAL = _cm.STENCIL_EQUAL

_cm.STENCIL_NOTEQUAL_swigconstant(_cm)
STENCIL_NOTEQUAL = _cm.STENCIL_NOTEQUAL

_cm.STENCIL_ALWAYS_swigconstant(_cm)
STENCIL_ALWAYS = _cm.STENCIL_ALWAYS

_cm.STENCIL_NEVER_swigconstant(_cm)
STENCIL_NEVER = _cm.STENCIL_NEVER

_cm.NUMSTENCILFUNCS_swigconstant(_cm)
NUMSTENCILFUNCS = _cm.NUMSTENCILFUNCS

_cm.STENCIL_INCR_WRAP_swigconstant(_cm)
STENCIL_INCR_WRAP = _cm.STENCIL_INCR_WRAP

_cm.STENCIL_DECR_WRAP_swigconstant(_cm)
STENCIL_DECR_WRAP = _cm.STENCIL_DECR_WRAP

_cm.STENCIL_KEEP_swigconstant(_cm)
STENCIL_KEEP = _cm.STENCIL_KEEP

_cm.STENCIL_INCR_swigconstant(_cm)
STENCIL_INCR = _cm.STENCIL_INCR

_cm.STENCIL_DECR_swigconstant(_cm)
STENCIL_DECR = _cm.STENCIL_DECR

_cm.STENCIL_REPLACE_swigconstant(_cm)
STENCIL_REPLACE = _cm.STENCIL_REPLACE

_cm.STENCIL_ZERO_swigconstant(_cm)
STENCIL_ZERO = _cm.STENCIL_ZERO

_cm.STENCIL_INVERT_swigconstant(_cm)
STENCIL_INVERT = _cm.STENCIL_INVERT

_cm.NUMSTENCILOPS_swigconstant(_cm)
NUMSTENCILOPS = _cm.NUMSTENCILOPS

_cm.TRIANGLELIST_swigconstant(_cm)
TRIANGLELIST = _cm.TRIANGLELIST

_cm.TRIANGLESTRIP_swigconstant(_cm)
TRIANGLESTRIP = _cm.TRIANGLESTRIP

_cm.TRIANGLEFAN_swigconstant(_cm)
TRIANGLEFAN = _cm.TRIANGLEFAN

_cm.QUADS_swigconstant(_cm)
QUADS = _cm.QUADS

_cm.LINELIST_swigconstant(_cm)
LINELIST = _cm.LINELIST

_cm.LINESTRIP_swigconstant(_cm)
LINESTRIP = _cm.LINESTRIP

_cm.LINELOOP_swigconstant(_cm)
LINELOOP = _cm.LINELOOP

_cm.POINTS_swigconstant(_cm)
POINTS = _cm.POINTS

_cm.NUMPRIMITIVES_swigconstant(_cm)
NUMPRIMITIVES = _cm.NUMPRIMITIVES

_cm.POLYGONS_swigconstant(_cm)
POLYGONS = _cm.POLYGONS

def getGLPRIMITIVETYPE(arg1):
    return _cm.getGLPRIMITIVETYPE(arg1)
getGLPRIMITIVETYPE = _cm.getGLPRIMITIVETYPE
class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cm.new_Mesh()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def triangle(self, a, b, c):
        return _cm.Mesh_triangle(self, a, b, c)

    def vertex(self, v):
        return _cm.Mesh_vertex(self, v)

    def color(self, clr):
        return _cm.Mesh_color(self, clr)

    def uv(self, coords):
        return _cm.Mesh_uv(self, coords)

    def numVertices(self):
        return _cm.Mesh_numVertices(self)

    def numIndices(self):
        return _cm.Mesh_numIndices(self)
    __swig_setmethods__["vertices"] = _cm.Mesh_vertices_set
    __swig_getmethods__["vertices"] = _cm.Mesh_vertices_get
    if _newclass:
        vertices = _swig_property(_cm.Mesh_vertices_get, _cm.Mesh_vertices_set)
    __swig_setmethods__["indices"] = _cm.Mesh_indices_set
    __swig_getmethods__["indices"] = _cm.Mesh_indices_get
    if _newclass:
        indices = _swig_property(_cm.Mesh_indices_get, _cm.Mesh_indices_set)
    __swig_setmethods__["primitive"] = _cm.Mesh_primitive_set
    __swig_getmethods__["primitive"] = _cm.Mesh_primitive_get
    if _newclass:
        primitive = _swig_property(_cm.Mesh_primitive_get, _cm.Mesh_primitive_set)
    __swig_destroy__ = _cm.delete_Mesh
    __del__ = lambda self: None
Mesh_swigregister = _cm.Mesh_swigregister
Mesh_swigregister(Mesh)

class Tessellator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tessellator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tessellator, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _cm.new_Tessellator()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    WINDING_ODD = _cm.Tessellator_WINDING_ODD
    WINDING_NONZERO = _cm.Tessellator_WINDING_NONZERO
    __swig_destroy__ = _cm.delete_Tessellator
    __del__ = lambda self: None
Tessellator_swigregister = _cm.Tessellator_swigregister
Tessellator_swigregister(Tessellator)


def clear(*args):
    return _cm.clear(*args)
clear = _cm.clear

def clearDepth(depthClear):
    return _cm.clearDepth(depthClear)
clearDepth = _cm.clearDepth

def clearStencil(stencilClear):
    return _cm.clearStencil(stencilClear)
clearStencil = _cm.clearStencil

def enableColorWrite(r, g, b, a):
    return _cm.enableColorWrite(r, g, b, a)
enableColorWrite = _cm.enableColorWrite

def enableBlend(flag):
    return _cm.enableBlend(flag)
enableBlend = _cm.enableBlend

def setBlendMode(mode):
    return _cm.setBlendMode(mode)
setBlendMode = _cm.setBlendMode

def setFillMode(mode):
    return _cm.setFillMode(mode)
setFillMode = _cm.setFillMode

def setCullMode(cull):
    return _cm.setCullMode(cull)
setCullMode = _cm.setCullMode

def enableDepthWrite(flag):
    return _cm.enableDepthWrite(flag)
enableDepthWrite = _cm.enableDepthWrite

def enableDepthRead(flag):
    return _cm.enableDepthRead(flag)
enableDepthRead = _cm.enableDepthRead

def enableDepthBuffer(flag):
    return _cm.enableDepthBuffer(flag)
enableDepthBuffer = _cm.enableDepthBuffer

def setDepthFunc(func):
    return _cm.setDepthFunc(func)
setDepthFunc = _cm.setDepthFunc

def enableStencilWrite(flag):
    return _cm.enableStencilWrite(flag)
enableStencilWrite = _cm.enableStencilWrite

def enableStencilRead(flag):
    return _cm.enableStencilRead(flag)
enableStencilRead = _cm.enableStencilRead

def enableStencilBuffer(flag):
    return _cm.enableStencilBuffer(flag)
enableStencilBuffer = _cm.enableStencilBuffer

def setStencilFunc(func, ref, mask):
    return _cm.setStencilFunc(func, ref, mask)
setStencilFunc = _cm.setStencilFunc

def setStencilOp(*args):
    return _cm.setStencilOp(*args)
setStencilOp = _cm.setStencilOp

def setPointSize(s):
    return _cm.setPointSize(s)
setPointSize = _cm.setPointSize

def enablePointSprites(flag, textureIndex):
    return _cm.enablePointSprites(flag, textureIndex)
enablePointSprites = _cm.enablePointSprites

def enableAntiAliasing(aa):
    return _cm.enableAntiAliasing(aa)
enableAntiAliasing = _cm.enableAntiAliasing

def lineWidth(w):
    return _cm.lineWidth(w)
lineWidth = _cm.lineWidth

def lineStipple(factor, pattern=0xAAAA):
    return _cm.lineStipple(factor, pattern)
lineStipple = _cm.lineStipple

def bindTexture(id, sampler=0):
    return _cm.bindTexture(id, sampler)
bindTexture = _cm.bindTexture

def unbindTexture(sampler=0):
    return _cm.unbindTexture(sampler)
unbindTexture = _cm.unbindTexture

def activeTexture(sampler):
    return _cm.activeTexture(sampler)
activeTexture = _cm.activeTexture

def pushViewport():
    return _cm.pushViewport()
pushViewport = _cm.pushViewport

def popViewport():
    return _cm.popViewport()
popViewport = _cm.popViewport

def setViewport(x, y, w, h):
    return _cm.setViewport(x, y, w, h)
setViewport = _cm.setViewport

def setIdentityTransform():
    return _cm.setIdentityTransform()
setIdentityTransform = _cm.setIdentityTransform

def setPerspectiveProjection(fovy, aspect, zNear, zFar):
    return _cm.setPerspectiveProjection(fovy, aspect, zNear, zFar)
setPerspectiveProjection = _cm.setPerspectiveProjection

def setFrustum(left, right, bottom, top, near, far):
    return _cm.setFrustum(left, right, bottom, top, near, far)
setFrustum = _cm.setFrustum

def setOrtho(*args):
    return _cm.setOrtho(*args)
setOrtho = _cm.setOrtho

def set2DView(w, h, rotate):
    return _cm.set2DView(w, h, rotate)
set2DView = _cm.set2DView

def setProjectionMatrix(mat):
    return _cm.setProjectionMatrix(mat)
setProjectionMatrix = _cm.setProjectionMatrix

def setModelViewMatrix(mat):
    return _cm.setModelViewMatrix(mat)
setModelViewMatrix = _cm.setModelViewMatrix

def applyMatrix(mat):
    return _cm.applyMatrix(mat)
applyMatrix = _cm.applyMatrix

def getProjectionMatrix():
    return _cm.getProjectionMatrix()
getProjectionMatrix = _cm.getProjectionMatrix

def getModelViewMatrix():
    return _cm.getModelViewMatrix()
getModelViewMatrix = _cm.getModelViewMatrix

def getViewport():
    return _cm.getViewport()
getViewport = _cm.getViewport

def identity():
    return _cm.identity()
identity = _cm.identity

def translate(*args):
    return _cm.translate(*args)
translate = _cm.translate

def rotate(*args):
    return _cm.rotate(*args)
rotate = _cm.rotate

def scale(*args):
    return _cm.scale(*args)
scale = _cm.scale

def pushMatrix(*args):
    return _cm.pushMatrix(*args)
pushMatrix = _cm.pushMatrix

def popMatrix():
    return _cm.popMatrix()
popMatrix = _cm.popMatrix

def vertex(*args):
    return _cm.vertex(*args)
vertex = _cm.vertex

def normal(*args):
    return _cm.normal(*args)
normal = _cm.normal

def uv(*args):
    return _cm.uv(*args)
uv = _cm.uv

def color(*args):
    return _cm.color(*args)
color = _cm.color

def beginVertices(prim):
    return _cm.beginVertices(prim)
beginVertices = _cm.beginVertices

def endVertices():
    return _cm.endVertices()
endVertices = _cm.endVertices

def drawUVQuad(x, y, w, h, maxU=0.0, maxV=1.0, flip=True):
    return _cm.drawUVQuad(x, y, w, h, maxU, maxV, flip)
drawUVQuad = _cm.drawUVQuad

def drawQuad(x, y, w, h):
    return _cm.drawQuad(x, y, w, h)
drawQuad = _cm.drawQuad

def fillCircle(center, radius, numSegments=0):
    return _cm.fillCircle(center, radius, numSegments)
fillCircle = _cm.fillCircle

def drawCircle(center, radius, numSegments=0):
    return _cm.drawCircle(center, radius, numSegments)
drawCircle = _cm.drawCircle

def drawTriangle(a, b, c):
    return _cm.drawTriangle(a, b, c)
drawTriangle = _cm.drawTriangle

def fillTriangle(a, b, c):
    return _cm.fillTriangle(a, b, c)
fillTriangle = _cm.fillTriangle

def drawRect(*args):
    return _cm.drawRect(*args)
drawRect = _cm.drawRect

def fillRect(*args):
    return _cm.fillRect(*args)
fillRect = _cm.fillRect

def drawLine(*args):
    return _cm.drawLine(*args)
drawLine = _cm.drawLine

def drawArrow(a, b, size):
    return _cm.drawArrow(a, b, size)
drawArrow = _cm.drawArrow

def drawXMarker(pos, size):
    return _cm.drawXMarker(pos, size)
drawXMarker = _cm.drawXMarker

def draw(*args):
    return _cm.draw(*args)
draw = _cm.draw

def fill(*args):
    return _cm.fill(*args)
fill = _cm.fill

def drawPrimitives(P, prim, offset=0, inc=1):
    return _cm.drawPrimitives(P, prim, offset, inc)
drawPrimitives = _cm.drawPrimitives

def drawWireBox(min, max):
    return _cm.drawWireBox(min, max)
drawWireBox = _cm.drawWireBox

def drawCube(center, size):
    return _cm.drawCube(center, size)
drawCube = _cm.drawCube

def drawWireCube(center, size):
    return _cm.drawWireCube(center, size)
drawWireCube = _cm.drawWireCube

def drawSphere(center, radius, segments=100):
    return _cm.drawSphere(center, radius, segments)
drawSphere = _cm.drawSphere

def drawAxis(mat, scale):
    return _cm.drawAxis(mat, scale)
drawAxis = _cm.drawAxis

def drawFrustum(proj_, invView_):
    return _cm.drawFrustum(proj_, invView_)
drawFrustum = _cm.drawFrustum

def drawGauss2d(*args):
    return _cm.drawGauss2d(*args)
drawGauss2d = _cm.drawGauss2d

def drawGauss3d(*args):
    return _cm.drawGauss3d(*args)
drawGauss3d = _cm.drawGauss3d

def removeShader(id):
    return _cm.removeShader(id)
removeShader = _cm.removeShader

def deleteShaderProgram(id):
    return _cm.deleteShaderProgram(id)
deleteShaderProgram = _cm.deleteShaderProgram

def deleteAllShaders():
    return _cm.deleteAllShaders()
deleteAllShaders = _cm.deleteAllShaders

def loadShader(vs, ps):
    return _cm.loadShader(vs, ps)
loadShader = _cm.loadShader

def reloadShader(id, vs, ps):
    return _cm.reloadShader(id, vs, ps)
reloadShader = _cm.reloadShader

def setTexture(handle, tex, sampler):
    return _cm.setTexture(handle, tex, sampler)
setTexture = _cm.setTexture

def bindShader(id):
    return _cm.bindShader(id)
bindShader = _cm.bindShader

def unbindShader():
    return _cm.unbindShader()
unbindShader = _cm.unbindShader

def setInt(handle, v):
    return _cm.setInt(handle, v)
setInt = _cm.setInt

def setFloat(handle, v):
    return _cm.setFloat(handle, v)
setFloat = _cm.setFloat

def setFloat2(handle, v):
    return _cm.setFloat2(handle, v)
setFloat2 = _cm.setFloat2

def setFloat3(handle, v):
    return _cm.setFloat3(handle, v)
setFloat3 = _cm.setFloat3

def setFloat4(handle, v):
    return _cm.setFloat4(handle, v)
setFloat4 = _cm.setFloat4

def setM44(handle, v):
    return _cm.setM44(handle, v)
setM44 = _cm.setM44

def setFloatArray(handle, v, n):
    return _cm.setFloatArray(handle, v, n)
setFloatArray = _cm.setFloatArray
class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    __swig_getmethods__["black"] = lambda x: _cm.Color_black
    if _newclass:
        black = staticmethod(_cm.Color_black)
    __swig_getmethods__["white"] = lambda x: _cm.Color_white
    if _newclass:
        white = staticmethod(_cm.Color_white)
    __swig_getmethods__["red"] = lambda x: _cm.Color_red
    if _newclass:
        red = staticmethod(_cm.Color_red)
    __swig_getmethods__["green"] = lambda x: _cm.Color_green
    if _newclass:
        green = staticmethod(_cm.Color_green)
    __swig_getmethods__["blue"] = lambda x: _cm.Color_blue
    if _newclass:
        blue = staticmethod(_cm.Color_blue)
    __swig_getmethods__["turquoise"] = lambda x: _cm.Color_turquoise
    if _newclass:
        turquoise = staticmethod(_cm.Color_turquoise)
    __swig_getmethods__["magenta"] = lambda x: _cm.Color_magenta
    if _newclass:
        magenta = staticmethod(_cm.Color_magenta)
    __swig_getmethods__["lemon"] = lambda x: _cm.Color_lemon
    if _newclass:
        lemon = staticmethod(_cm.Color_lemon)
    __swig_getmethods__["grey"] = lambda x: _cm.Color_grey
    if _newclass:
        grey = staticmethod(_cm.Color_grey)
    __swig_getmethods__["darkGrey"] = lambda x: _cm.Color_darkGrey
    if _newclass:
        darkGrey = staticmethod(_cm.Color_darkGrey)
    __swig_getmethods__["hsv"] = lambda x: _cm.Color_hsv
    if _newclass:
        hsv = staticmethod(_cm.Color_hsv)

    def __init__(self):
        this = _cm.new_Color()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _cm.delete_Color
    __del__ = lambda self: None
Color_swigregister = _cm.Color_swigregister
Color_swigregister(Color)

def Color_black():
    return _cm.Color_black()
Color_black = _cm.Color_black

def Color_white():
    return _cm.Color_white()
Color_white = _cm.Color_white

def Color_red():
    return _cm.Color_red()
Color_red = _cm.Color_red

def Color_green():
    return _cm.Color_green()
Color_green = _cm.Color_green

def Color_blue():
    return _cm.Color_blue()
Color_blue = _cm.Color_blue

def Color_turquoise():
    return _cm.Color_turquoise()
Color_turquoise = _cm.Color_turquoise

def Color_magenta():
    return _cm.Color_magenta()
Color_magenta = _cm.Color_magenta

def Color_lemon():
    return _cm.Color_lemon()
Color_lemon = _cm.Color_lemon

def Color_grey():
    return _cm.Color_grey()
Color_grey = _cm.Color_grey

def Color_darkGrey():
    return _cm.Color_darkGrey()
Color_darkGrey = _cm.Color_darkGrey

def Color_hsv(h, s, v):
    return _cm.Color_hsv(h, s, v)
Color_hsv = _cm.Color_hsv


def shapeUnion(a, b):
    return _cm.shapeUnion(a, b)
shapeUnion = _cm.shapeUnion

def shapeDifference(a, b):
    return _cm.shapeDifference(a, b)
shapeDifference = _cm.shapeDifference

def shapeIntersection(a, b):
    return _cm.shapeIntersection(a, b)
shapeIntersection = _cm.shapeIntersection

def shapeXor(a, b):
    return _cm.shapeXor(a, b)
shapeXor = _cm.shapeXor

def chordLengths(P):
    return _cm.chordLengths(P)
chordLengths = _cm.chordLengths

def cumChordLengths(P):
    return _cm.cumChordLengths(P)
cumChordLengths = _cm.cumChordLengths

def chordLength(P):
    return _cm.chordLength(P)
chordLength = _cm.chordLength

def interpolate(*args):
    return _cm.interpolate(*args)
interpolate = _cm.interpolate

def uniformSample(P, s):
    return _cm.uniformSample(P, s)
uniformSample = _cm.uniformSample

def angleBetween(a, b):
    return _cm.angleBetween(a, b)
angleBetween = _cm.angleBetween

def triangleArea(a, b, c):
    return _cm.triangleArea(a, b, c)
triangleArea = _cm.triangleArea

def closestPointOnSegment(p, a, b):
    return _cm.closestPointOnSegment(p, a, b)
closestPointOnSegment = _cm.closestPointOnSegment

def distanceToSegment(p, a, b):
    return _cm.distanceToSegment(p, a, b)
distanceToSegment = _cm.distanceToSegment

def squareDistanceToSegment(p, a, b):
    return _cm.squareDistanceToSegment(p, a, b)
squareDistanceToSegment = _cm.squareDistanceToSegment

def distanceToLine(p, a, b):
    return _cm.distanceToLine(p, a, b)
distanceToLine = _cm.distanceToLine

def rectTransform(src, dst, padding=0.0):
    return _cm.rectTransform(src, dst, padding)
rectTransform = _cm.rectTransform

def ui_hasFocus():
    return _cm.ui_hasFocus()
ui_hasFocus = _cm.ui_hasFocus

def ui_begin(*args):
    return _cm.ui_begin(*args)
ui_begin = _cm.ui_begin

def ui_end():
    return _cm.ui_end()
ui_end = _cm.ui_end

def ui_modified():
    return _cm.ui_modified()
ui_modified = _cm.ui_modified

def ui_dragger(index, pos, selected=False, size=-1.):
    return _cm.ui_dragger(index, pos, selected, size)
ui_dragger = _cm.ui_dragger

def ui_highlightDragger(pos, size=-1.):
    return _cm.ui_highlightDragger(pos, size)
ui_highlightDragger = _cm.ui_highlightDragger

def ui_line(a, b):
    return _cm.ui_line(a, b)
ui_line = _cm.ui_line

def ui_handle(index, ang, pos, length, selected=False):
    return _cm.ui_handle(index, ang, pos, length, selected)
ui_handle = _cm.ui_handle

def ui_affineSimple(index, m, selected=False):
    return _cm.ui_affineSimple(index, m, selected)
ui_affineSimple = _cm.ui_affineSimple

def ui_selector():
    return _cm.ui_selector()
ui_selector = _cm.ui_selector

def ui_dragDelta():
    return _cm.ui_dragDelta()
ui_dragDelta = _cm.ui_dragDelta

def ui_toolbar(title, items, selectedItem, horizontal=False, showAscii=False):
    return _cm.ui_toolbar(title, items, selectedItem, horizontal, showAscii)
ui_toolbar = _cm.ui_toolbar

def ui_demo():
    return _cm.ui_demo()
ui_demo = _cm.ui_demo
# This file is compatible with both classic and new-style classes.


